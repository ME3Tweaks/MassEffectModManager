# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

trigger:
- M3Core
- ModManager-Next
- MergeMigration

pool:
  vmImage: 'windows-2022'

variables:
  solution: '**/*.sln'
  buildPlatform: 'x64'
  buildConfiguration: 'WinAzureRelease'
  framework: 'net8.0'

resources:
  repositories:
  - repository: ModTestingData # The name used to reference this repository in the checkout step
    type: github
    endpoint: ME3Tweaks
    name: ME3Tweaks/ModTestingData

steps: # Steps begin following this

- checkout: self
  submodules: recursive 
  displayName: Checkout code
  fetchDepth: 1 # Only fetch the latest commit (faster)
  
# Mod Manager targets .NET 6
- task: UseDotNet@2
  displayName: Install .NET 8.0 SDK
  inputs:
    packageType: 'sdk'
    version: '8.0.x' 
    
# Required as LEC dual targets
#- task: UseDotNet@2
#  displayName: Install .NET 7.0 SDK
#  inputs:
#    packageType: 'sdk'
#   version: '7.0.x' 

- task: DotNetCoreCLI@2
  displayName: Build M3
  inputs:
    command: 'build'
    projects: 'ME3TweaksModManager/MassEffectModManagerCore/ME3TweaksModManager.csproj'
    arguments: '-c WinAzureRelease'

# Clone the test repository
- checkout: ModTestingData
  displayName: Checkout testing data
  submodules: false
  fetchDepth: 1 # Only fetch the latest commit (faster)


# The configuration MUST contain the word 'Azure' or LEC will fail to build if the compilation symbol 'AZURE' is defined!
- task: DotNetCoreCLI@2
  displayName: Test M3
  inputs:
    command: 'test'
    projects: 'ME3TweaksModManager\\MassEffectModManagerCore.Tests\\ME3TweaksModManager.Tests.csproj'
    arguments: '/p:DefineConstants="WINDOWS%3BAZURE" /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:Include=ME3TweaksModManager -c WinAzureRelease'

# Generate the report using ReportGenerator (https://github.com/danielpalme/ReportGenerator)
# First install the tool on the machine, then run it
- script: |
    dotnet tool install -g dotnet-reportgenerator-globaltool
    reportgenerator -reports:ME3TweaksModManager/MassEffectModManagerCore.Tests/**/*.cobertura.xml -targetdir:$(Build.SourcesDirectory)/CodeCoverage -reporttypes:HtmlInline_AzurePipelines;Cobertura
  displayName: Create code coverage report

- task: PublishCodeCoverageResults@1
  displayName: Publish code coverage
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: '$(Build.SourcesDirectory)/CodeCoverage/Cobertura.xml'
    reportDirectory: '$(Build.SourcesDirectory)/CodeCoverage'
